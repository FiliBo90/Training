<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>GymApp Versi√≥n Definitiva - Con Mejoras</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Tailwind CSS desde CDN -->
  <script src="https://cdn.tailwindcss.com"></script>

  <!-- Chart.js desde CDN -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <!-- Estilos extra para hero, transiciones y acordeones -->
  <style>
    .shadow-soft {
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }
    .hero {
      height: 280px;
      background-size: cover;
      background-position: center;
      position: relative;
    }
    .hero-overlay {
      position: absolute;
      top: 0; left: 0;
      width: 100%; height: 100%;
      background: rgba(0,0,0,0.5);
    }
    .hero-title {
      position: relative;
      z-index: 1;
      color: #fff;
      font-size: 2rem;
      font-weight: bold;
      text-align: center;
      padding: 1rem;
    }
    button, .accordion-btn {
      transition: background-color 0.3s ease, transform 0.2s ease;
    }
    button:hover, .accordion-btn:hover {
      transform: translateY(-1px);
    }
    .accordion-content {
      transition: max-height 0.3s ease;
      overflow: hidden;
      max-height: 0;
    }
    .accordion-content.show {
      max-height: 800px;
    }
  </style>
</head>
<body class="bg-gray-100 flex flex-col min-h-screen">

  <!-- Hero -->
  <section 
    class="hero flex items-center justify-center mb-4"
    style="background-image: url('https://images.unsplash.com/photo-1600891964599-f61ba0e24092?auto=format&fit=crop&w=1600&q=80')">
    <div class="hero-overlay"></div>
    <h1 class="hero-title">GymApp Versi√≥n Definitiva - Con Mejoras</h1>
  </section>

  <!-- Barra de navegaci√≥n -->
  <header class="bg-white shadow-soft p-4 flex justify-center space-x-4">
    <button id="btnRutina" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
      Rutina
    </button>
    <button id="btnProgreso" class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700">
      Progreso
    </button>
    <button id="btnEditarRutina" class="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700">
      Editar Rutina
    </button>
  </header>

  <!-- Contenido principal -->
  <main class="flex-1 p-4 max-w-5xl mx-auto w-full">

    <!-- Secci√≥n Rutina -->
    <section id="rutinaSection" class="mb-8">
      <div class="text-center mb-4">
        <h2 class="text-2xl font-bold">Rutina de Entrenamiento</h2>
        <p class="text-gray-600">Selecciona un mes para ver los d√≠as y ejercicios (acorde√≥n).</p>
      </div>

      <!-- Botones de Mes -->
      <div class="flex flex-wrap justify-center mb-6 gap-2" id="mesTabsContainer">
        <!-- Se generar√°n din√°micamente seg√∫n la rutina en localStorage -->
      </div>

      <div id="rutinaContent" class="max-w-3xl mx-auto"></div>
    </section>

    <!-- Secci√≥n Progreso -->
    <section id="progresoSection" class="hidden">
      <!-- Formulario Progreso -->
      <div class="bg-white shadow-soft rounded p-4 mb-6">
        <h2 class="text-xl font-bold mb-2">Registrar Progreso üìà</h2>
        <form id="progressForm" class="space-y-4">
          <div>
            <label class="block mb-1 font-semibold">Fecha:</label>
            <input type="date" id="progressDate" class="w-full p-2 border rounded" required />
          </div>
          <div>
            <label class="block mb-1 font-semibold">Mes:</label>
            <select id="progressMes" class="w-full p-2 border rounded">
              <option value="">Seleccione Mes</option>
            </select>
          </div>
          <div>
            <label class="block mb-1 font-semibold">D√≠a:</label>
            <select id="progressDia" class="w-full p-2 border rounded">
              <option value="">Seleccione D√≠a</option>
            </select>
          </div>
          <div>
            <label class="block mb-1 font-semibold">Ejercicio:</label>
            <select id="progressEjercicio" class="w-full p-2 border rounded">
              <option value="">Seleccione Ejercicio</option>
            </select>
          </div>
          <div>
            <label class="block mb-1 font-semibold">Series (Reps y Peso):</label>
            <div id="seriesContainer" class="space-y-2"></div>
            <button type="button" id="addSeriesBtn" class="mt-2 px-3 py-1 bg-purple-600 text-white rounded hover:bg-purple-700">
              ‚ûï Agregar Serie
            </button>
          </div>
          <button type="submit" class="w-full py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
            Guardar Progreso üíæ
          </button>
        </form>
      </div>

      <!-- Historial -->
      <div class="bg-white shadow-soft rounded p-4 mb-6">
        <div class="flex justify-between items-center mb-2">
          <h2 class="text-xl font-bold">Historial de Progreso üìö</h2>
          <button id="exportHistoryBtn" class="px-3 py-1 bg-indigo-600 text-white rounded hover:bg-indigo-700">
            Exportar Historial
          </button>
        </div>
        <div id="progressList" class="space-y-2"></div>
      </div>

      <!-- Gr√°fico -->
      <div class="bg-white shadow-soft rounded p-4">
        <h2 class="text-xl font-bold mb-2">Gr√°fico de Progresos üìä</h2>
        <p class="text-sm text-gray-500 mb-4">
          Se mostrar√°n dos l√≠neas: Peso (kg) y Reps. Selecciona el mes, d√≠a, ejercicio y la serie.
        </p>
        <div class="grid grid-cols-2 sm:grid-cols-4 gap-4 mb-4">
          <select id="chartMes" class="p-2 border rounded">
            <option value="">Seleccione Mes</option>
          </select>
          <select id="chartDia" class="p-2 border rounded">
            <option value="">Seleccione D√≠a</option>
          </select>
          <select id="chartEjercicio" class="p-2 border rounded">
            <option value="">Seleccione Ejercicio</option>
          </select>
          <select id="chartSerie" class="p-2 border rounded">
            <option value="">Serie</option>
            <option value="1">Serie 1</option>
            <option value="2">Serie 2</option>
            <option value="3">Serie 3</option>
            <option value="4">Serie 4</option>
            <option value="5">Serie 5</option>
          </select>
        </div>
        <button id="updateChartBtn" class="mb-4 px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700">
          Actualizar Gr√°fico üîÑ
        </button>
        <canvas id="progressChart" class="w-full h-64"></canvas>
      </div>
    </section>

    <!-- Secci√≥n Editar Rutina -->
    <section id="editRoutineSection" class="hidden">
      <div class="bg-white shadow-soft rounded p-4 mb-6">
        <h2 class="text-xl font-bold mb-2">Editar Rutina</h2>
        <p class="text-sm text-gray-500 mb-4">
          Aqu√≠ puedes modificar manualmente la rutina en formato JSON. Ten cuidado al renombrar ‚ÄúMes 1‚Äù, ‚ÄúMes 2‚Äù o ‚ÄúMes 3‚Äù, porque el historial de progreso hace referencia a esas claves.
        </p>
        <textarea id="routineJson" class="w-full p-2 border rounded" rows="15"></textarea>
        <div class="flex space-x-2 mt-4">
          <button id="loadRoutineBtn" class="px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700">
            Cargar JSON
          </button>
          <button id="saveRoutineBtn" class="px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700">
            Guardar Cambios
          </button>
        </div>
      </div>
    </section>
  </main>

  <footer class="bg-white p-4 text-center text-gray-500">
    <p>¬© 2025 - GymApp Versi√≥n Definitiva. Todos los derechos reservados.</p>
  </footer>

  <!-- JavaScript principal -->
  <script>
    // ------------------------------------------------------------
    // 1. Rutina en localStorage: si no existe, usar la "defaultRoutine"
    // ------------------------------------------------------------
    const defaultRoutine = {
      "Mes 1": {
        "D√≠a 1: PUSH": [
          { nombre: "Calentamiento: Movilidad de hombros y pectorales", detalle: "5‚Äì10 min. Rotaciones, band pull-aparts, estiramientos din√°micos" },
          { nombre: "Press de banca (Barra)", detalle: "4 x 5..." },
          { nombre: "Press militar (Barra)", detalle: "4 x 5..." },
          { nombre: "Press inclinado (Barra o mancuernas)", detalle: "3 x 6‚Äì8..." },
          { nombre: "Elevaciones laterales (estilo Poliquin)", detalle: "3 x 12‚Äì14..." },
          { nombre: "Extensi√≥n de tr√≠ceps (barra EZ o mancuerna)", detalle: "3 x 8‚Äì10..." },
          { nombre: "Core: Plancha", detalle: "3 x 30‚Äì45 seg..." }
        ],
        "D√≠a 2: PULL": [...],
        "D√≠a 3: LEGS": [...],
        "D√≠a 4: TOTAL BODY": [...]
      },
      "Mes 2": {
        "D√≠a 1: PUSH": [...],
        "D√≠a 2: PULL": [...],
        "D√≠a 3: LEGS": [...],
        "D√≠a 4: TOTAL BODY": [...]
      },
      "Mes 3": {
        "D√≠a 1: PUSH": [...],
        "D√≠a 2: PULL": [...],
        "D√≠a 3: LEGS": [...],
        "D√≠a 4: TOTAL BODY": [...]
      }
    };

    function saveRoutineToLocalStorage() {
      localStorage.setItem('gymRoutine', JSON.stringify(routine));
    }

    let storedRoutine = localStorage.getItem('gymRoutine');
    let routine;
    if (storedRoutine) {
      routine = JSON.parse(storedRoutine);
    } else {
      routine = defaultRoutine;
      saveRoutineToLocalStorage();
    }

    // ------------------------------------------------------------
    // 2. MOSTRAR RUTINA EN LA SECCI√ìN "RUTINA"
    // ------------------------------------------------------------
    const mesTabsContainer = document.getElementById('mesTabsContainer');
    const rutinaContent = document.getElementById('rutinaContent');

    function renderMesTabs() {
      mesTabsContainer.innerHTML = '';
      Object.keys(routine).forEach(mesKey => {
        const btn = document.createElement('button');
        btn.className = 'mesTab px-4 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600';
        btn.setAttribute('data-mes', mesKey);
        btn.textContent = mesKey;
        btn.addEventListener('click', () => {
          displayRutina(mesKey);
        });
        mesTabsContainer.appendChild(btn);
      });
    }

    function displayRutina(mes) {
      const dias = Object.keys(routine[mes] || {});
      let html = `<h3 class="text-xl font-bold mb-2 text-center">Rutina ${mes}</h3>`;
      dias.forEach(dia => {
        html += `
          <div class="bg-white shadow-soft rounded mb-4">
            <button class="w-full text-left px-4 py-2 font-semibold accordion-btn bg-gray-100 hover:bg-gray-200"
                    onclick="toggleDay('${mes}','${dia}', this)">
              <div class="flex justify-between items-center">
                <span>${dia}</span>
                <span class="text-xl">‚ûï</span>
              </div>
            </button>
            <div class="accordion-content px-4 pb-2" id="content-${mes}-${dia.replace(/[^a-zA-Z0-9]/g,'')}">
        `;
        const ejercicios = routine[mes][dia];
        ejercicios.forEach(e => {
          html += `
            <div class="my-2">
              <p class="font-semibold">${e.nombre}</p>
              <p class="text-sm text-gray-600">${e.detalle}</p>
            </div>
          `;
        });
        html += `</div></div>`;
      });
      rutinaContent.innerHTML = html;
    }

    function toggleDay(mes, dia, btn) {
      const icon = btn.querySelector('span.text-xl');
      const contentId = `content-${mes}-${dia.replace(/[^a-zA-Z0-9]/g,'')}`;
      const content = document.getElementById(contentId);
      if (content.classList.contains('show')) {
        content.classList.remove('show');
        icon.textContent = '‚ûï';
      } else {
        content.classList.add('show');
        icon.textContent = '‚ûñ';
      }
    }

    renderMesTabs();
    displayRutina("Mes 1"); // Por defecto

    // ------------------------------------------------------------
    // 3. NAVEGACI√ìN (Rutina / Progreso / Editar Rutina)
    // ------------------------------------------------------------
    const btnRutina = document.getElementById('btnRutina');
    const btnProgreso = document.getElementById('btnProgreso');
    const btnEditarRutina = document.getElementById('btnEditarRutina');

    const rutinaSection = document.getElementById('rutinaSection');
    const progresoSection = document.getElementById('progresoSection');
    const editRoutineSection = document.getElementById('editRoutineSection');

    btnRutina.addEventListener('click', () => {
      rutinaSection.classList.remove('hidden');
      progresoSection.classList.add('hidden');
      editRoutineSection.classList.add('hidden');
    });

    btnProgreso.addEventListener('click', () => {
      rutinaSection.classList.add('hidden');
      progresoSection.classList.remove('hidden');
      editRoutineSection.classList.add('hidden');
      populateProgressDay();
    });

    btnEditarRutina.addEventListener('click', () => {
      rutinaSection.classList.add('hidden');
      progresoSection.classList.add('hidden');
      editRoutineSection.classList.remove('hidden');
      loadRoutineJson();
    });

    // ------------------------------------------------------------
    // 4. FORMULARIO DE PROGRESO
    // ------------------------------------------------------------
    const progressForm = document.getElementById('progressForm');
    const progressDate = document.getElementById('progressDate');
    const progressMesSelect = document.getElementById('progressMes');
    const progressDiaSelect = document.getElementById('progressDia');
    const progressEjercicioSelect = document.getElementById('progressEjercicio');
    const seriesContainer = document.getElementById('seriesContainer');
    const addSeriesBtn = document.getElementById('addSeriesBtn');

    function populateProgressMes() {
      progressMesSelect.innerHTML = '<option value="">Seleccione Mes</option>';
      Object.keys(routine).forEach(mKey => {
        const opt = document.createElement('option');
        opt.value = mKey; // "Mes 1", "Mes 2", "Mes 3"
        opt.textContent = mKey;
        progressMesSelect.appendChild(opt);
      });
    }

    function populateProgressDay() {
      populateProgressMes();
      progressDiaSelect.innerHTML = '<option value="">Seleccione D√≠a</option>';
      progressEjercicioSelect.innerHTML = '<option value="">Seleccione Ejercicio</option>';
      // Si ya hubiera un mes seleccionado
      const mes = progressMesSelect.value;
      if (routine[mes]) {
        const dias = Object.keys(routine[mes]);
        dias.forEach(d => {
          const option = document.createElement('option');
          option.value = d;
          option.textContent = d;
          progressDiaSelect.appendChild(option);
        });
      }
    }

    progressMesSelect.addEventListener('change', () => {
      progressDiaSelect.innerHTML = '<option value="">Seleccione D√≠a</option>';
      progressEjercicioSelect.innerHTML = '<option value="">Seleccione Ejercicio</option>';
      const mes = progressMesSelect.value;
      if (routine[mes]) {
        const dias = Object.keys(routine[mes]);
        dias.forEach(d => {
          const opt = document.createElement('option');
          opt.value = d;
          opt.textContent = d;
          progressDiaSelect.appendChild(opt);
        });
      }
    });

    progressDiaSelect.addEventListener('change', () => {
      progressEjercicioSelect.innerHTML = '<option value="">Seleccione Ejercicio</option>';
      const mes = progressMesSelect.value;
      const dia = progressDiaSelect.value;
      if (mes && dia && routine[mes] && routine[mes][dia]) {
        routine[mes][dia].forEach(e => {
          const opt = document.createElement('option');
          opt.value = e.nombre;
          opt.textContent = e.nombre;
          progressEjercicioSelect.appendChild(opt);
        });
      }
    });

    function addSeriesRow() {
      const row = document.createElement('div');
      row.className = 'flex space-x-2';
      row.innerHTML = `
        <input type="number" placeholder="Reps" class="w-1/2 p-2 border rounded" required>
        <input type="number" placeholder="Peso (kg)" class="w-1/2 p-2 border rounded" required>
        <button type="button" class="bg-red-500 text-white px-2 rounded hover:bg-red-600">üóë</button>
      `;
      const delBtn = row.querySelector('button');
      delBtn.addEventListener('click', () => row.remove());
      seriesContainer.appendChild(row);
    }

    addSeriesBtn.addEventListener('click', addSeriesRow);

    function resetSeriesContainer() {
      seriesContainer.innerHTML = '';
      addSeriesRow();
    }

    progressForm.addEventListener('submit', (e) => {
      e.preventDefault();
      const dateVal = progressDate.value;
      const mesVal = progressMesSelect.value; // "Mes 1", "Mes 2", "Mes 3"
      const diaVal = progressDiaSelect.value;
      const ejVal = progressEjercicioSelect.value;

      if (!dateVal || !mesVal || !diaVal || !ejVal) {
        alert("Por favor completa la Fecha, Mes, D√≠a y Ejercicio.");
        return;
      }

      const rows = seriesContainer.querySelectorAll('div.flex');
      let series = [];
      rows.forEach((row, i) => {
        const inputs = row.querySelectorAll('input');
        const reps = inputs[0].value;
        const peso = inputs[1].value;
        if (reps && peso) {
          series.push({ serie: i+1, reps, peso });
        }
      });
      if (series.length === 0) {
        alert("Agrega al menos una serie v√°lida.");
        return;
      }

      let progress = JSON.parse(localStorage.getItem('gymProgress')) || [];
      let existingDay = progress.find(d => d.date === dateVal);
      if (!existingDay) {
        existingDay = { date: dateVal, workouts: [] };
        progress.push(existingDay);
      }
      existingDay.workouts.push({ mes: mesVal, dia: diaVal, ejercicio: ejVal, series });
      localStorage.setItem('gymProgress', JSON.stringify(progress));

      // Reset
      progressForm.reset();
      resetSeriesContainer();
      loadProgressList();
      updateChart();
    });

    // ------------------------------------------------------------
    // 5. HISTORIAL - con bot√≥n para borrar workouts y exportar
    // ------------------------------------------------------------
    function loadProgressList() {
      const progressList = document.getElementById('progressList');
      let progress = JSON.parse(localStorage.getItem('gymProgress')) || [];

      if (progress.length === 0) {
        progressList.innerHTML = "<p class='text-gray-500'>No hay entradas registradas a√∫n.</p>";
        return;
      }

      // Ordenar por fecha desc
      progress.sort((a,b) => new Date(b.date) - new Date(a.date));
      let html = '';
      progress.forEach(day => {
        html += `
          <div class="border-b py-2">
            <div class="font-bold cursor-pointer flex items-center" onclick="toggleHistory(this.nextElementSibling)">
              <img src="https://cdn-icons-png.flaticon.com/512/3004/3004143.png"
                   class="w-5 h-5 mr-2" alt="calendar icon" />
              Fecha: ${day.date} (Total entrenos: ${day.workouts.length})
            </div>
            <div class="ml-6 hidden">
        `;
        day.workouts.forEach((w,i) => {
          html += `
            <div class="bg-gray-50 rounded p-2 my-2">
              <p class="font-semibold text-sm flex justify-between items-center">
                <span>Entreno #${i+1}: ${w.mes}, ${w.dia}, Ejercicio: ${w.ejercicio}</span>
                <button class="bg-red-500 text-white px-2 rounded hover:bg-red-600"
                  onclick="deleteWorkout('${day.date}', ${i})">
                  Borrar
                </button>
              </p>
              <ul class="list-disc ml-4 text-sm mt-1">
          `;
          w.series.forEach(s => {
            html += `<li>Serie ${s.serie}: ${s.reps} reps, ${s.peso} kg</li>`;
          });
          html += '</ul></div>';
        });
        html += `</div></div>`;
      });
      progressList.innerHTML = html;
    }

    function toggleHistory(el) {
      el.classList.toggle('hidden');
    }

    // Borrar un workout individual
    function deleteWorkout(date, wIndex) {
      let progress = JSON.parse(localStorage.getItem('gymProgress')) || [];
      let dayObj = progress.find(d => d.date === date);
      if (!dayObj) return;
      // Eliminar solo ese workout
      dayObj.workouts.splice(wIndex, 1);
      // Si no quedan workouts, dejamos el d√≠a con 0 workouts (o podr√≠amos eliminar el d√≠a entero).
      localStorage.setItem('gymProgress', JSON.stringify(progress));
      loadProgressList();
      updateChart();
    }

    loadProgressList();

    // Bot√≥n exportar historial
    const exportHistoryBtn = document.getElementById('exportHistoryBtn');
    exportHistoryBtn.addEventListener('click', () => {
      let progress = JSON.parse(localStorage.getItem('gymProgress')) || [];
      let dataStr = JSON.stringify(progress, null, 2);
      const blob = new Blob([dataStr], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'historial.json';
      a.click();
      URL.revokeObjectURL(url);
    });

    // ------------------------------------------------------------
    // 6. GR√ÅFICA (Chart.js) - 2 l√≠neas (peso y reps)
    // ------------------------------------------------------------
    let chart;
    const ctx = document.getElementById('progressChart').getContext('2d');
    const chartMesSelect = document.getElementById('chartMes');
    const chartDiaSelect = document.getElementById('chartDia');
    const chartEjercicioSelect = document.getElementById('chartEjercicio');
    const chartSerieSelect = document.getElementById('chartSerie');
    const updateChartBtn = document.getElementById('updateChartBtn');

    function populateChartMes() {
      chartMesSelect.innerHTML = '<option value="">Seleccione Mes</option>';
      Object.keys(routine).forEach(mKey => {
        const opt = document.createElement('option');
        opt.value = mKey;
        opt.textContent = mKey + (mKey === "Mes 1" ? " - Adaptaci√≥n" :
                                  mKey === "Mes 2" ? " - Progresi√≥n" :
                                  mKey === "Mes 3" ? " - Consolidaci√≥n" : "");
        chartMesSelect.appendChild(opt);
      });
    }
    populateChartMes();

    chartMesSelect.addEventListener('change', () => {
      chartDiaSelect.innerHTML = '<option value="">Seleccione D√≠a</option>';
      chartEjercicioSelect.innerHTML = '<option value="">Seleccione Ejercicio</option>';
      const mes = chartMesSelect.value; // "Mes 1", "Mes 2", "Mes 3"
      if (routine[mes]) {
        const dias = Object.keys(routine[mes]);
        dias.forEach(d => {
          const opt = document.createElement('option');
          opt.value = d;
          opt.textContent = d;
          chartDiaSelect.appendChild(opt);
        });
      }
    });

    chartDiaSelect.addEventListener('change', () => {
      chartEjercicioSelect.innerHTML = '<option value="">Seleccione Ejercicio</option>';
      const mes = chartMesSelect.value;
      const dia = chartDiaSelect.value;
      if (routine[mes] && routine[mes][dia]) {
        routine[mes][dia].forEach(e => {
          const opt = document.createElement('option');
          opt.value = e.nombre;
          opt.textContent = e.nombre;
          chartEjercicioSelect.appendChild(opt);
        });
      }
    });

    updateChartBtn.addEventListener('click', updateChart);

    function getAllWorkouts() {
      let progress = JSON.parse(localStorage.getItem('gymProgress')) || [];
      const all = [];
      progress.forEach(day => {
        day.workouts.forEach(w => {
          all.push({
            date: day.date,
            mes: w.mes,
            dia: w.dia,
            ejercicio: w.ejercicio,
            series: w.series
          });
        });
      });
      // Orden asc
      all.sort((a,b) => new Date(a.date) - new Date(b.date));
      return all;
    }

    function updateChart() {
      const selMes = chartMesSelect.value;
      const selDia = chartDiaSelect.value;
      const selEjercicio = chartEjercicioSelect.value;
      const selSerie = chartSerieSelect.value;

      let all = getAllWorkouts();
      if (selMes) all = all.filter(w => w.mes === selMes);
      if (selDia) all = all.filter(w => w.dia === selDia);
      if (selEjercicio) all = all.filter(w => w.ejercicio === selEjercicio);

      if (!selSerie) {
        alert("Selecciona una serie (1,2,3,4 o 5) para graficar.");
        return;
      }

      if (chart) chart.destroy();

      const labels = [];
      const weightData = [];
      const repsData = [];

      all.forEach(w => {
        // Buscar la serie en particular
        const found = w.series.find(s => s.serie.toString() === selSerie);
        if (found) {
          labels.push(w.date);
          weightData.push(parseFloat(found.peso));
          repsData.push(parseFloat(found.reps));
        }
      });

      if (weightData.length === 0 && repsData.length === 0) {
        // No hay datos
        ctx.clearRect(0,0,ctx.canvas.width,ctx.canvas.height);
        ctx.fillStyle = '#999';
        ctx.font = '16px sans-serif';
        ctx.fillText("No hay datos para graficar", 20,30);
        return;
      }

      chart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: labels,
          datasets: [
            {
              label: 'Peso (kg)',
              data: weightData,
              borderColor: 'rgba(75,192,192,1)',
              backgroundColor: 'rgba(75,192,192,0.2)',
              tension: 0.1,
              pointRadius: 5,
              pointHoverRadius: 7
            },
            {
              label: 'Reps',
              data: repsData,
              borderColor: 'rgba(255,99,132,1)',
              backgroundColor: 'rgba(255,99,132,0.2)',
              tension: 0.1,
              pointRadius: 5,
              pointHoverRadius: 7
            }
          ]
        },
        options: {
          responsive: true,
          scales: {
            x: {
              title: { display: true, text: 'Fecha' }
            },
            y: {
              title: { display: true, text: 'Valor' },
              suggestedMin: 0
            }
          },
          plugins: {
            legend: { display: true }
          }
        }
      });
    }

    // ------------------------------------------------------------
    // 7. EDICI√ìN DE RUTINA (textarea)
    // ------------------------------------------------------------
    const editRoutineSection = document.getElementById('editRoutineSection');
    const routineJsonTextarea = document.getElementById('routineJson');
    const loadRoutineBtn = document.getElementById('loadRoutineBtn');
    const saveRoutineBtn = document.getElementById('saveRoutineBtn');

    function loadRoutineJson() {
      routineJsonTextarea.value = JSON.stringify(routine, null, 2);
    }

    loadRoutineBtn.addEventListener('click', () => {
      loadRoutineJson();
    });

    saveRoutineBtn.addEventListener('click', () => {
      try {
        const newRoutine = JSON.parse(routineJsonTextarea.value);
        routine = newRoutine;
        saveRoutineToLocalStorage();
        // Volver a renderizar la secci√≥n de Rutina y selects
        renderMesTabs();
        displayRutina("Mes 1");
        populateProgressDay();
        populateChartMes();
        alert("Rutina guardada correctamente.");
      } catch (err) {
        alert("Error al parsear JSON. Revisa la sintaxis.");
      }
    });

  </script>
</body>
</html>
